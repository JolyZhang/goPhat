package main

import(
    "fmt"
)

type Data struct {
    value string
}

type Node struct {
    value *Data
    next *Node
}

type Queue struct {
    head *Node
    tail *Node
    count int
}

func NewQueue() *Queue {
    q := &Queue{}
    return q
}

func (q *Queue) Len() int {
    return q.count
}

func (q *Queue) Push(value *Data) {
    n := &Node {value, nil}

    if q.tail == nil {
        q.tail = n
        q.head = n
    } else {
        q.tail.next = n
        q.tail = n
    }
    q.count++
}

func (q *Queue) Pop() interface{} {
    if q.head == nil {
        return nil
    }

    n := q.head
    q.head = n.next

    if q.head == nil {
        q.tail = nil
    }
    q.count--

    return n.value
}

func (q *Queue) Peek() interface{} {
    n := q.head

    if n == nil || n.value == nil {
        return nil
    }

    return n.value
}

func main() {

    q := NewQueue()
    q.Push(&Data{"cat"})
    fmt.Println(q.Pop(), q.Pop())
}
